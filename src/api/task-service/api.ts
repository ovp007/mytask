/* tslint:disable */
/* eslint-disable */
/**
 * My task
 * Displays all the Tasks that were assigned to him or her by the supervisor.
 *
 * The version of the OpenAPI document: 2.5
 * Contact: some_email@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * id
     * @type {number}
     * @memberof Task
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'task_definition_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'task_instance_status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'process_instance_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'process_definition_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'process_instance_effective_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'assignee'?: string;
}

/**
 * MyTasksApi - axios parameter creator
 * @export
 */
export const MyTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Displays all the Tasks that were assigned to him or her by the supervisor.
         * @summary Displays all the Tasks that were assigned to him or her by the supervisor.
         * @param {number} [id] 
         * @param {string} [assignee] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks: async (id?: number, assignee?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (assignee !== undefined) {
                localVarQueryParameter['assignee'] = assignee;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MyTasksApi - functional programming interface
 * @export
 */
export const MyTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MyTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Displays all the Tasks that were assigned to him or her by the supervisor.
         * @summary Displays all the Tasks that were assigned to him or her by the supervisor.
         * @param {number} [id] 
         * @param {string} [assignee] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasks(id?: number, assignee?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(id, assignee, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MyTasksApi - factory interface
 * @export
 */
export const MyTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MyTasksApiFp(configuration)
    return {
        /**
         * Displays all the Tasks that were assigned to him or her by the supervisor.
         * @summary Displays all the Tasks that were assigned to him or her by the supervisor.
         * @param {number} [id] 
         * @param {string} [assignee] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasks(id?: number, assignee?: string, status?: string, options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.getTasks(id, assignee, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MyTasksApi - object-oriented interface
 * @export
 * @class MyTasksApi
 * @extends {BaseAPI}
 */
export class MyTasksApi extends BaseAPI {
    /**
     * Displays all the Tasks that were assigned to him or her by the supervisor.
     * @summary Displays all the Tasks that were assigned to him or her by the supervisor.
     * @param {number} [id] 
     * @param {string} [assignee] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyTasksApi
     */
    public getTasks(id?: number, assignee?: string, status?: string, options?: AxiosRequestConfig) {
        return MyTasksApiFp(this.configuration).getTasks(id, assignee, status, options).then((request) => request(this.axios, this.basePath));
    }
}


